{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IA6CQ,EACA,EAEA,EACA,EAjDF,EAA2B,SAAS,gBAAgB,CAAC,eACrD,EAAoB,SAAS,aAAa,CAAC,uBAC3C,EAAkB,SAAS,aAAa,CAAC,qBAOzC,EAAW,SAAC,CADjB,EAKC,MAAQ,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,EAAG,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,G,EAAY,MAAM,CAAC,SAAC,CAAA,CAAK,CAApC,EAGE,OAAO,GAFQ,CAAC,EAAK,WAAW,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,GAGnD,EAAG,EACL,EA2BQ,EAhBC,AAgBwC,EAW/C,GA3BwC,AA2BxC,EA3BmD,MAAM,CAiBnD,EAAQ,EAUd,GARM,EAAiB,EAAQ,cAAc,CAAC,SACxC,EAAe,EAAM,cAAc,CAAC,SAE1C,AAMA,EANe,WAAW,CAAG,EAC7B,AAMA,EANa,WAAW,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar populationOfTheCountries = document.querySelectorAll(\".population\");\nvar averagePopulation = document.querySelector(\".average-population\");\nvar totalPopulation = document.querySelector(\".total-population\");\n/**\n * @function getTotal\n * @param {NodeListOf<Element>} population\n * @returns {number}\n */ var getTotal = function(population) {\n    population;\n    return _to_consumable_array(population).reduce(function(acc, curr) {\n        var number = +curr.textContent.split(\",\").join(\"\");\n        return acc + number;\n    }, 0);\n};\n/**\n * @function getAverage\n * @param {NodeListOf<Element>} population\n * @param {Function} getTotalPopulation\n * @returns {number}\n *\n */ var getAverage = function(population, getTotalPopulation) {\n    return getTotalPopulation(population) / population.length;\n};\n/**\n * @function addNumbersToElement\n * @param {NodeListOf<Element>} populationElements\n * @param {Element} averageElement\n * @param {Element} totalElement\n * @returns {void}\n */ var addNumbersToElement = function(populationElements, averageElement, totalElement) {\n    var average = getAverage(populationElements, getTotal);\n    var total = getTotal(populationElements);\n    var toLocalAverage = average.toLocaleString(\"en-US\");\n    var toLocalTotal = total.toLocaleString(\"en-US\");\n    averageElement.textContent = toLocalAverage;\n    totalElement.textContent = toLocalTotal;\n};\naddNumbersToElement(populationOfTheCountries, averagePopulation, totalPopulation);\n\n//# sourceMappingURL=index.75c3ca09.js.map\n","'use strict';\n\nconst populationOfTheCountries = document.querySelectorAll('.population');\nconst averagePopulation = document.querySelector('.average-population');\nconst totalPopulation = document.querySelector('.total-population');\n\n/**\n * @function getTotal\n * @param {NodeListOf<Element>} population\n * @returns {number}\n */\nconst getTotal = (population) => {\n  if (!population) {\n  }\n\n  return [...population].reduce((acc, curr) => {\n    const number = +curr.textContent.split(',').join('');\n\n    return acc + number;\n  }, 0);\n};\n\n/**\n * @function getAverage\n * @param {NodeListOf<Element>} population\n * @param {Function} getTotalPopulation\n * @returns {number}\n *\n */\n\nconst getAverage = (population, getTotalPopulation) => {\n  return getTotalPopulation(population) / population.length;\n};\n\n/**\n * @function addNumbersToElement\n * @param {NodeListOf<Element>} populationElements\n * @param {Element} averageElement\n * @param {Element} totalElement\n * @returns {void}\n */\n\nconst addNumbersToElement = (\n  populationElements,\n  averageElement,\n  totalElement,\n) => {\n  const average = getAverage(populationElements, getTotal);\n  const total = getTotal(populationElements);\n\n  const toLocalAverage = average.toLocaleString('en-US');\n  const toLocalTotal = total.toLocaleString('en-US');\n\n  averageElement.textContent = toLocalAverage;\n  totalElement.textContent = toLocalTotal;\n};\n\naddNumbersToElement(\n  populationOfTheCountries,\n  averagePopulation,\n  totalPopulation,\n);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","average","total","toLocalAverage","toLocalTotal","populationOfTheCountries","document","querySelectorAll","averagePopulation","querySelector","totalPopulation","getTotal","population","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","reduce","acc","curr","textContent","split","join","getTotalPopulation","toLocaleString","averageElement","totalElement"],"version":3,"file":"index.75c3ca09.js.map"}